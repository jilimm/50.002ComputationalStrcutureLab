.include "C:\Users\Jing Yun\Desktop\50.002 Computation Structure\50002\50002\nominal.jsim"
.include "C:\Users\Jing Yun\Desktop\50.002 Computation Structure\50002\50002\stdcell.jsim"
.include "C:\Users\Jing Yun\Desktop\50.002 Computation Structure\50002\50002\lab3_session"
.include "C:\Users\Jing Yun\Desktop\50.002 Computation Structure\50002\50002\lab6checkoff.jsim"


.subckt pc clk reset pcsel[2:0] PC4[31:0] PC4CC[31:0] JT[31:0] ia[31:0]
Xpcbuff1 0 ia[1] buffer
Xpcbuff2 0 ia[0] buffer

*add logic to bit 31 of jt input
Xjt1 JT[31] ia31 jtfinal[31] and2
Xjt2 JT[30:2] jtfinal[30:2] buffer

*mux5 implementation for pcsel (with good inputs)
Xpcmux54 pcsel0#30 pcsel1#30 PC4[31:2] PC4CC[31:2] jtfinal[31:2] vdd 0#28 vdd temppc[31:2] mux4
Xpcmux52 pcsel2#30 temppc[31:2] vdd 0#27 vdd 0 pcLoadTemp[31:2] mux2

*if there is reset load 80000000 into PC
Xresetmux1 reset#29 pcLoadTemp[30:2] 0#29 pcLoad[30:2] mux2
Xresetmux2 reset pcLoadTemp[31] vdd pcLoad[31] mux2

*PC register
Xpcdreg pcLoad[31:2] clk#30 ia[31:2] dreg
.ends



.subckt regfile clk werf ra2sel wasel ra[4:0] rb[4:0] rc[4:0]
+ wdata[31:0] radata[31:0] rbdata[31:0]

Xregfile
+ vdd 0 0 ra[4:0] adata[31:0]     // A read port
+ vdd 0 0 ra2mux[4:0] bdata[31:0] // B read port
+ 0 clk werf wa[4:0] wdata[31:0]  // write port
+ $memory width=32 nlocations=31

*make r31 output 0
Xra31and4 ra[0:3] zra31and4 and4
Xra31and2 ra[4] zra31and4 raforce0 and2
Xra31mux raforce0#32 adata[31:0] 0#32 radata[31:0] mux2
Xrb31and4 ra2mux[0:3] zrb31and4 and4
Xrb31and2 ra2mux[4] zrb31and4 rd2force0 and2
Xrb31mux rd2force0#32 bdata[31:0] 0#32 rbdata[31:0] mux2
Xra2selmux ra2sel#5 rb[4:0] rc[4:0] ra2mux[4:0] mux2

Xwaselmux wasel#5 rc[4:0] vdd#4 0 wa[4:0] mux2
.ends

.subckt ctl reset id[31:26] zfinal irqfinal pcsel[2:0] ra2sel asel bsel 
+ alufn[5:0] wdsel[1:0] wasel werf moe wr 


Xctl vdd 0 0 id[31:26]// one read port
+ pcseltemp[2:0] waselt asel ra2sel bsel alufn[5:0] wdselt[1:0] werft moe xwr
+ $memory width=18 nlocations=64 contents=(
+  0b011100000000000100      // opcode=0b000000
+  0b011100000000000100      // opcode=0b000001
+  0b011100000000000100      // opcode=0b000010
+  0b011100000000000100      // opcode=0b000011
+  0b011100000000000100      // opcode=0b000100
+  0b011100000000000100      // opcode=0b000101
+  0b011100000000000100      // opcode=0b000110
+  0b011100000000000100      // opcode=0b000111
+  0b011100000000000100      // opcode=0b001000
+  0b011100000000000100      // opcode=0b001001
+  0b011100000000000100      // opcode=0b001010
+  0b011100000000000100      // opcode=0b001011
+  0b011100000000000100      // opcode=0b001100
+  0b011100000000000100      // opcode=0b001101
+  0b011100000000000100      // opcode=0b001110
+  0b011100000000000100      // opcode=0b001111
+  0b011100000000000100      // opcode=0b010000
+  0b011100000000000100      // opcode=0b010001
+  0b011100000000000100      // opcode=0b010010
+  0b011100000000000100      // opcode=0b010011
+  0b011100000000000100      // opcode=0b010100
+  0b011100000000000100      // opcode=0b010101
+  0b011100000000000100      // opcode=0b010110
+  0b011100000000000100      // opcode=0b010111
+  0b000000100000010110      // opcode=0b011000 LD
+  0b000001100000000001      // opcode=0b011001 ST
+  0b011100000000000100      // opcode=0b011010
+  0b010000000000000100      // opcode=0b011011 JMP
+  0b011100000000000100      // opcode=0b011100 
+  0b000000000000000100      // opcode=0b011101 BEQ
+  0b000000000000000100      // opcode=0b011110 BNE
+  0b000010001101010110      // opcode=0b011111 LDR
+  0b000000000000001100      // opcode=0b100000 ADD
+  0b000000000000101100      // opcode=0b100001 SUB
+  0b011000000000000000      // opcode=0b100010 MUL
+  0b011000000000000000      // opcode=0b100011 DIV
+  0b000000011001101100      // opcode=0b100100 CMPEQ
+  0b000000011010101100      // opcode=0b100101 CMPLT
+  0b000000011011101100      // opcode=0b100110 CMPLE
+  0b011100000000000100      // opcode=0b100111
+  0b000000001100001100      // opcode=0b101000 AND
+  0b000000001111001100      // opcode=0b101001 OR
+  0b000000001011001100      // opcode=0b101010 XOR
+  0b011100000000000100      // opcode=0b101011 
+  0b000000010000001100      // opcode=0b101100 SHL
+  0b000000010000101100      // opcode=0b101101 SHR
+  0b000000010001101100      // opcode=0b101110 SRA
+  0b011100000000000100      // opcode=0b101111
+  0b000000100000001100      // opcode=0b110000 ADDC
+  0b000000100000101100      // opcode=0b110001 SUBC
+  0b011100000000000100      // opcode=0b110010 
+  0b011100000000000100      // opcode=0b110011 
+  0b000000111001101100      // opcode=0b110100 CMPEQC
+  0b000000111010101100      // opcode=0b110101 CMPLTC
+  0b000000111011101100      // opcode=0b110110 CMPLEC
+  0b011100000000000100      // opcode=0b110111
+  0b000000101100001100      // opcode=0b111000 ANDC
+  0b000000101111001100      // opcode=0b111001 ORC
+  0b000000101011001100      // opcode=0b111010 XORC
+  0b011100000000000100      // opcode=0b111011 
+  0b000000110000001100      // opcode=0b111100 SHLC
+  0b000000110000101100      // opcode=0b111101 SHRC
+  0b000000110001101100      // opcode=0b111110 SRAC
+  0b011100000000000100      // opcode=0b111111
+ )
*deciding whether beq and bne should be jump*
Xctl1 id31 id31inv inverter
Xctl2 id27 id27inv inverter
Xctl3 id26 id26inv inverter
Xctl4 zfinal zfinalinv inverter
Xctlisbeq1 id31inv id30 id29 id28 isbeq1 and4
Xctlisbeq2 id27inv id26 isbeq2 and2
Xctlisbeq3 isbeq1 isbeq2 isbeq and2
Xctlbne1 id31inv id30 id29 id28 isbne1 and4
Xctlbne2 id27 id26inv isbne2 and2
Xctlbne3 isbne1 isbne2 isbne and2

Xctljmp1 zfinal isbeq beqjmp and2

Xctljmp2 zfinalinv isbne bnejmp and2
Xctlbeq4 beqjmp#3 pcseltemp[2:0] 0#2 vdd pcsel1[2:0] mux2
Xctlbne4 bnejmp#3 pcsel1[2:0] 0#2 vdd pcsel2[2:0] mux2

***what happens when interrupt occurs**
Xctlirq1 irqfinal#3 pcsel2[2:0] vdd 0#2 pcsel[2:0] mux2
Xctlirq2 irqfinal waselt vdd wasel mux2
Xctlirq3 irqfinal werft vdd werf mux2
Xctlirq4 irqfinal#2 wdselt[1:0] 0#2 wdsel[1:0] mux2
Xctlirq5 irqfinal xwr 0 xwr1 mux2
Xresetmux reset xwr1 0 wr mux2
.ends


.subckt beta clk reset irq ia[31:0] id[31:0] ma[31:0]
+ moe mrd[31:0] wr mwd[31:0]

**can an intertupt occur**
Xirq1 ia31 ia31inv inverter
Xirq2 ia31inv irq irqfinal and2

*pc clk reset pcsel[2:0] PC4[31:0] PC4CC[31:0] JT[31:0] ia[31:0]
Xbetapc clk reset pcsel[2:0] PC4[31:0] PC4CC[31:0] JT[31:0] ia[31:0] pc

*+4 portion in the PC
Xbetapc4 0#6 ia[31:0] 0#29 vdd 0#2 PC4[31:0] z1 v1 n1 alu

*Pc4cc part
Xbetapc4cc 0#6 PC4[31:0] id[15]#14 id[15:0] 0#2 PC4CC[31:0] z2 v2 n2 alu


*regfile
Xregfilebeta clk werf ra2sel wasel id[20:16] id[15:11] id[25:21] regwd[31:0] JT[31:0] mwd[31:0] regfile

**DO THE Z LOGIC
Xbetaz1 JT[31:24] JT[23:16] JT[15:8] JT[7:0] ztemp[7:0] or4
Xbetaz2 ztemp[7:6] ztemp[5:4] ztemp[3:2] ztemp[1:0] zt[1:0] or4
Xbetaz3 zt[1] zt[0] zfinal nor2

*subckt ctl reset id[31:26] zfinal irqfinal pcsel[2:0] ra2sel asel bsel 
*+ alufn[5:0] wdsel[1:0] wasel werf moe wr 
Xbetactl reset id[31:26] zfinal irqfinal pcsel[2:0] ra2sel asel bsel alufn[5:0] wdsel[1:0] wasel werf moe wr ctl 

**ASEL mux
Xaselmux asel#32 JT[31:0] 0 PC4CC[30:0] aluain[31:0] mux2

**BSEL mux
Xbselmux bsel#32 mwd[31:0] id[15]#16 id[15:0] alubin[31:0] mux2

**ALU in beta
Xbetaalu alufn[5:0] aluain[31:0] alubin[31:0] ma[31:0] z3 v3 n3 alu

**WDSEL mux
Xwdselmux wdsel[0]#31 wdsel[1]#31 PC4[30:0] ma[30:0] mrd[30:0] 0#31 regwd[30:0] mux4
Xwdselmux1 wdsel[0] wdsel[1] ia[31] ma[31] mrd[31] 0 regwd[31] mux4


.ends
