.include "C:\Users\Jing Yun\Desktop\50.002 Computation Structure\50002\50002\nominal.jsim"
.include "C:\Users\Jing Yun\Desktop\50.002 Computation Structure\50002\50002\stdcell.jsim"
.include "C:\Users\Jing Yun\Desktop\50.002 Computation Structure\50002\checkoff2d\2dcheckoff_100ns.jsim"
*XOR as NAND gate: input is A,B output is C
.subckt xorInNand2 a b c
XxorInNand1 a b c1
XxorInNand2 a c1 c2
XxorInNand3 b c1 c3
XxorInNand4 c2 c3 c
.ends
*SUM: input is A,B,C output is Z
.subckt sum3 a b c z
Xsum1 a b z1 xor2
Xsum2 z1 c z xor2
.ends
*Cout: input is A,B,C output is Z
.subckt cout3 a b c z 
Xnand1 a b w nand2
Xnand2 a c x nand2
Xnand3 b c y nand2
Xnand4 w x y z nand3
.ends
*P for carry look ahead adder
.subckt claP a b p
Xadderp a b p xor2
.ends
*G for carry look ahead adder
.subckt claG a b g
Xadderg a b g and2
.ends
*CLA Cout 
.subckt claCout p g c z
XclaCout1 p c z1 and2
XclaCout2 g z1 z or2
.ends
*FA full bit adder: input is Ai,Bi,Cin output is S, Pi and Gi
.subckt FA a b ci s p g 
XSUM a b ci s sum3
XadderP a b p claP
Xadderg a b g claG
.ends 
*PGgener unit: input is Gj1k Pj1k Gij Pij Ci ouput is Gik Pik Ciout Cj1
*gp inputs (put the on top on first, then sideeways gp input then c input)
*gp output (sideways c output first then top C output)
.subckt claPGgener Gj1k Pj1k Gij Pij Ci Gik Pik Ciout Cj1
XclaPGgener1 Ci Ciout buffer
XclaPGgener2 Pij Ci Cj11 and2
XclaPGgener3 Cj11 Gij Cj1 or2
XclaPGgener4 Pj1k Gij Gik1 and2
XclaPGgener5 Gik1 Gj1k Gik or2
XclaPGgener6 Pij Pj1k Pik and2
.ends
.subckt adder32 ALUFN[0] A[31:0] B[31:0] s[31:0] z v n
*setting the inputs XB and c0 (overcall Cin of the adder)
Xadder32id1 B[31:0] ALUFN[0]#32 XB[31:0] xor2 
*setting up 32 adder units for the CLA
Xadderunits A[31:0] XB[31:0] ci[31:0] s[31:0] g[31:0] p[31:0] FA
*setting up the 32 pggenerators directly below each adder
Xpggener1 g1 p1 g0 p0 c0e g0n1 p0n1 ci0 ci1 claPGgener
Xpggener3 g3 p3 g2 p2 c2a g2n3 p2n3 ci2 ci3 claPGgener
*second pggenerator unit under the 3rd FA unit
Xpggener3a g2n3 p2n3 g0n1 p0n1 c0d g0n3 p0n3 c0e c2a claPGgener
Xpggener5 g5 p5 g4 p4 c4b g4n5 p4n5 ci4 ci5 claPGgener
Xpggener7 g7 p7 g6 p6 c6a g6n7 p6n7 ci6 ci7 claPGgener
Xpggener7a g6n7 p6n7 g4n5 p4n5 c4a g4n7 p4n7 c4b c6a claPGgener
Xpggener7b g4n7 p4n7 g0n3 p0n3 c0c g0n7 p0n7 c0d c4a claPGgener
Xpggener9 g9 p9 g8 p8 c8c g8n9 p8n9 ci8 ci9 claPGgener
Xpggener11 g11 p11 g10 p10 c10a g10n11 p10n11 ci10 ci11 claPGgener
Xpggener11a g10n11 p10n11 g8n9 p8n9 c8b g8n11 p8n11 c8c c10a claPGgener
Xpggener13 g13 p13 g12 p12 c12b g12n13 p12n13 ci12 ci13 claPGgener
Xpggener15 g15 p15 g14 p14 c14a g14n15 p14n15 ci14 ci15 claPGgener
Xpggener15a g14n15 p14n15 g12n13 p12n13 c12a g12n15 p12n15 c12b c14a claPGgener
Xpggener15b g12n15 p12n15 g8n11 p8n11 c8a g8n15 p8n15 c8b c12a claPGgener
Xpggener15c g8n15 p8n15 g0n7 p0n7 c0b g0n15 p0n15 c0c c8a claPGgener
Xpggener17 g17 p17 g16 p16 c16c g16n17 p16n17 ci16 ci17 claPGgener
Xpggener19 g19 p19 g18 p18 c18a g18n19 p18n19 ci18 ci19 claPGgener
Xpggener19a g18n19 p18n19 g16n17 p16n17 c16b g16n19 p16n19 c16c c18a claPGgener 
Xpggener21 g21 p21 g20 p20 c20b g20n21 p20n21 ci20 ci21 claPGgener
Xpggener23 g23 p23 g22 p22 c22a g22n23 p22n23 ci22 ci23 claPGgener
Xpggener23a g22n23 p22n23 g20n21 p20n21 c20a g20n23 p20n23 c20b c22a claPGgener
Xpggener23b g20n23 p20n23 g16n19 p16n19 c16a g16n23 p16n23 c16b c20a claPGgener
Xpggener23c g16n23 p16n23 g0n15 p0n15 c0a g0n23 p0n23 c0b c16a claPGgener
Xpggener25 g25 p25 g24 p24 c24c g24n25 p24n25 ci24 ci25 claPGgener
Xpggener27 g27 p27 g26 p26 c26a g26n27 p26n27 ci26 ci27 claPGgener
Xpggener27a g26n27 p26n27 g24n25 p24n25 c24b g24n27 p24n27 c24c c26a claPGgener
Xpggener29 g29 p29 g28 p28 c28a g28n29 p28n29 ci28 ci29 claPGgener
Xpggener31 g31 p31 g30 p30 c30a g30n31 p30n31 ci30 ci31 claPGgener
Xpggener31a g30n31 p30n31 g28n29 p28n29 c28b g28n31 p28n31 c28a c30a claPGgener
Xpggener31b g28n31 p28n31 g24n27 p24n27 c24a g24n31 p24n31 c24b c28b claPGgener
Xpggener31c g24n31 p24n31 g0n23 p0n23 ALUFN[0] g0n31 p0n31 c0a c24a claPGgener
*final outputs g031 p031 are not needed so we ground them
*calculating V from the formula
Xinv1 S31 S31i inverter
XandA A31 XB31 S31i v1 and3
Xinv2 A31 A31inv inverter
Xinv3 B31 XB31inv inverter
XandB A31inv XB31inv S31 v2 and3
Xidv v1 v2 v or2
*calculating n
XN S31 n buffer
*Calcuating z (check if all output is 0)
Xid5 S[7:0] S[15:8] S[23:16] S[31:24] PP[7:0] or4
Xid6 PP[1:0] PP[3:2] PP[5:4] PP[7:6] Y[1:0] or4
Xid7 Y1 Y0 z nor2
.ends